#!/bin/bash
set -e

echo "üöÄ Starting Laravel Auto-Setup..."

# Fun√ß√£o para aplicar permiss√µes
apply_permissions() {
    echo "üîß Applying automatic permission fixes..."
    
    # Usa UID/GID do host ou valores padr√£o
    local HOST_UID=${HOST_UID:-1000}
    local HOST_GID=${HOST_GID:-1000}
    
    # Diret√≥rios cr√≠ticos com permiss√µes espec√≠ficas
    for dir in storage bootstrap/cache; do
        if [ -d "/var/www/$dir" ]; then
            chown -R $HOST_UID:$HOST_GID "/var/www/$dir"
            chmod -R 775 "/var/www/$dir"
            echo "‚úì Permissions set for $dir"
        fi
    done
    
    # Arquivo .env com permiss√µes espec√≠ficas
    [ -f "/var/www/.env" ] && chmod 664 "/var/www/.env" && echo "‚úì Permissions set for .env"
    
    # Garante que o usu√°rio tem acesso aos diret√≥rios
    chown -R $HOST_UID:$HOST_GID /var/www/vendor
    chmod -R 775 /var/www/vendor
    
    echo "‚úÖ Automatic permission fixes completed"
}

# 1. Cria estrutura de diret√≥rios
echo "üìÇ Ensuring directory structure..."
mkdir -p \
    storage/framework/{cache,sessions,views} \
    storage/logs \
    bootstrap/cache \
    public/storage

# Aplica permiss√µes iniciais
apply_permissions

# 2. Instala√ß√£o de depend√™ncias com l√≥gica de repeti√ß√£o
install_dependencies() {
    local max_retries=3
    local attempt=0
    local delay=10
    
    while [ $attempt -lt $max_retries ]; do
        ((attempt++))
        echo "üì¶ Installing dependencies (attempt $attempt/$max_retries)..."
        
        if composer install --no-interaction --prefer-dist --optimize-autoloader; then
            # Atualiza permiss√µes ap√≥s instala√ß√£o
            apply_permissions
            return 0
        fi
        
        echo "‚ö†Ô∏è Attempt $attempt failed, retrying in $delay seconds..."
        sleep $delay
    done
    
    return 1
}

# Verifica status do Vite
check_vite() {
    if ! curl -s http://vite:5173 >/dev/null; then
        echo "‚ö†Ô∏è Vite server is not responding - assets may not load!"
        echo "‚ÑπÔ∏è Run 'docker-compose up vite' in another terminal if needed"
    else
        echo "‚úì Vite server is running"
    fi
}

# Executa verifica√ß√µes
check_vite

# Instala depend√™ncias se necess√°rio
if [ ! -d "vendor" ] || [ ! -f "vendor/autoload.php" ]; then
    install_dependencies || {
        echo "‚ùå Failed to install dependencies after maximum attempts"
        exit 1
    }
fi

# 3. Configura√ß√£o do ambiente
if [ ! -f ".env" ]; then
    echo "‚öôÔ∏è Initializing environment..."
    cp .env.example .env
    php artisan key:generate --ansi
    apply_permissions
fi

# 4. Otimiza√ß√£o da aplica√ß√£o
echo "‚ö° Optimizing application..."
php artisan config:clear
php artisan view:clear
php artisan route:clear
php artisan cache:clear

# Cria link de storage se n√£o existir
if [ ! -L "public/storage" ]; then
    echo "üîó Creating storage link..."
    php artisan storage:link
    apply_permissions
fi

# Verifica√ß√£o final de sa√∫de
echo "üîç Running final health checks..."
if [ -f "vendor/autoload.php" ] && [ -w storage ] && [ -w bootstrap/cache ]; then
    echo "‚úì Vendor autoload OK"
    echo "‚úì Storage directory writable"
    echo "‚úì Bootstrap cache writable"
    
    # Aplica permiss√µes finais
    apply_permissions
    
    echo "‚úÖ System ready! Starting PHP-FPM..."
    exec php-fpm -F -R
else
    echo "‚ùå Critical: System not ready for startup"
    echo "‚ÑπÔ∏è Check the following:"
    echo " - vendor/autoload.php exists"
    echo " - storage directory is writable"
    echo " - bootstrap/cache is writable"
    exit 1
fi